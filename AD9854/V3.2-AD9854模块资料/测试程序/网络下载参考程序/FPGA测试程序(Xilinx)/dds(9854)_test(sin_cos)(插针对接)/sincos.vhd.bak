--*********************************************************************   
--* 标题: DDS测试程序
--* 文件: topdesign.vhd  
--* 作者: SJ&QJY       
--* 日期: 2009.10.26 
--* 修改: 2009.10.26   
--* 软件: Xilinx ISE 7.1 SP4  
--* 芯片: Xilinx Spartan2 FPGA (XC2S200-pq208)   
--* 说明: （产生单频点正弦波信号） 
--********************************************************************* 
--------------------------------------------------------------------------------
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_ARITH.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;

---- Uncomment the following library declaration if instantiating
---- any Xilinx primitives in this code.
--library UNISIM;
--use UNISIM.VComponents.all;

entity sincos is
  Port (   clk : in std_logic;
           mst_rst : out std_logic;
           d : out std_logic_vector(7 downto 0);
           a : out std_logic_vector(5 downto 0);
           wrb : out std_logic;
           io_ud : out std_logic);
end sincos;

architecture Behavioral of sincos is
		    signal data_tmp :std_logic_vector(7 downto 0);		        --数据寄存器
			 signal address_tmp :std_logic_vector(5 downto 0);		--地址寄存器
			 signal cl   :std_logic;					--输出时钟
			 signal count:std_logic_vector(5 downto 0);		        --时钟计数器
			 signal dount:std_logic_vector(5 downto 0);		        --数据计数器

	 
begin
        cl<=clk;
		  wrb<=not cl;
process(clk)
   begin
		if(clk'event and clk='1')then
		  if(count=36)then
		  count<="000000";
		  else
		  count<=count+'1';
		  end if;
		end if;
end process;

process(clk)
  begin
	 if(clk'event and clk='1')then
		  if(dount<=2)then
		  mst_rst<='1';
		  dount<=dount+'1';
		  else
		  mst_rst<='0';
		  end if;
		end if;
end process;

process(clk)
  begin
	 if(clk'event and clk='1')then 
            if count=16  then   io_ud<='1';else io_ud<='0'; end if;
            if count=4   then   address_tmp<="000100";   data_tmp<="00101100";	--频率控制字(第40~47位)
	    elsif count=5   then   address_tmp<="000101";   data_tmp<="11001100";  --频率控制字(第32~39位)
	    elsif count=6   then   address_tmp<="000110";   data_tmp<="11001100";  --频率控制字(第24~31位)
            elsif count=7   then   address_tmp<="000111";   data_tmp<="11001100";  --频率控制字(第16~23位)
	    elsif count=8   then   address_tmp<="001000";   data_tmp<="11001100";  --频率控制字(第8~15位)
            elsif count=9   then   address_tmp<="001001";   data_tmp<="11001100";  --频率控制字(第0~7位)

	    elsif   count=10  then    address_tmp<="011101";   data_tmp<="00010100"; 	 	
	    elsif   count=11  then    address_tmp<="011110";   data_tmp<="01001010";  --后四位是设置倍频系数，此处为10倍频。  		 			
	    elsif   count=12  then    address_tmp<="011111";   data_tmp<="00000000";    	 	
	    elsif   count=13  then    address_tmp<="100000";   data_tmp<="01000000"; 
	    end if;		  
		  								--	  281474976710655
		  d<=data_tmp;				--	  4251981272405
		  a<=address_tmp;   			--  000000111101110111111101110101010101010101010101
	end if;								  --1100 11001100 11001100 11001100 11001100 11001100
end process;										  
																
end Behavioral;
